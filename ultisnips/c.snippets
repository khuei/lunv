priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet incc "#include <...>"
#include <${1:stdio}.h>
endsnippet

snippet inc "#include '...'"
#include "${1}"
endsnippet

snippet once "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:symbol} ${2:value}
#endif
endsnippet

snippet #if "#if #endif"
#if ${1}
${2}
#endif
endsnippet

snippet nocxx "#ifdef _cplusplus ... extern C .. #endif"
#ifdef __cplusplus
extern "C" {
#endif

${1}

#ifdef __cplusplus
}
#endif
endsnippet

snippet main "main(int argc, char *argv[])"
int
main(int argc, char *argv[])
{
	${1}

	return 0;
}
endsnippet

snippet mainn "main(void)"
int
main(void)
{
	${1}

	return 0;
}
endsnippet

snippet fund "function declaration"
${1:void} ${2:function_name}(${3:void});
endsnippet

snippet fun "function"
${1:void}
${2:function_name}(${3:void})
{
	${4}
}
endsnippet

snippet if "if"
if (${1:/*condition */})${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2: {:)/}
	${2}
${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2:}:)/}
endsnippet

snippet elif "else if"
else if (${1:/*condition */})${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2: {:)/}
	${2}
${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2:}:)/}
endsnippet

snippet else "else"
else${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2: {:)/}
	${2}
${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2:}:)/}
endsnippet

snippet switch "switch"
switch (${1:/* variable */}) {
${2}
}
endsnippet

snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet default
default:
	${1}
endsnippet

snippet for "for loop"
for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; ${5:++}$2)${6/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2: {:)/}
	${6}
${6/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2:}:)/}
endsnippet

snippet wh "while"
while (${1:/* condition */})${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2: {:)/}
	${2}
${2/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2:}:)/}
endsnippet

snippet do "do ... while"
do {
	${2}
} while (${1:/* condition */});
endsnippet

snippet struct "typedef struct"
typedef struct ${1:name} {
	${2}
} $1;
endsnippet

snippet enum "typedef enum"
typedef enum {
	${2}
} ${1:name};
endsnippet

snippet fpr "fprintf"
fprintf(${1:stderr}, "${2}"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}${3}${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet pr "printf"
printf("${1}"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}${2}${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim:ft=snippets:
