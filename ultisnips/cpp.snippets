priority -50

extends c

priority -49

snippet incc "#include <...>"
#include <${1:iostream}>
endsnippet

snippet inc "#include '...'"
#include "${1}"
endsnippet

snippet ns "namespace"
namespace ${1} {
	${2}
} // namespace $1
endsnippet

snippet binc "#include <boost/shared_ptr.hpp>"
#include <boost/${1:shared_ptr}.hpp>
endsnippet

snippet array "std::array"
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet map "std::map"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector"
std::vector<${1:char}> ${2};
endsnippet

snippet deque "std::deque"
std::deque<${1:T}> ${2};
endsnippet

snippet flist "std::forward_list"
std::forward_list<${1:T}> ${2};
endsnippet

snippet list "std::list"
std::list<${1:T}> ${2};
endsnippet

snippet set "std::set"
std::set<${1:T}> ${2};
endsnippet

snippet map "std::map"
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset "std::multiset"
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap "std::multimap"
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset "std::unordered_set"
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap "std::unordered_map"
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset "std::unordered_multiset"
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap "std::unordered_multimap"
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack "std::stack"
std::stack<${1:T}> ${2};
endsnippet

snippet queue "std::queue"
std::queue<${1:T}> ${2};
endsnippet

snippet pqueue "std::priority_queue"
std::priority_queue<${1:T}> ${2};
endsnippet

snippet tp "template <typename ..>"
template <typename ${1:_InputIter}>
endsnippet

snippet cout "std::cout"
std::cout << ${1} << std::endl;
endsnippet

snippet cin "std::cin"
std::cin >> ${1};
endsnippet

snippet cl "class"
class ${1} {
	${2}
};
endsnippet

snippet struct "typedef struct"
struct ${1:name} {
	${2}
};
endsnippet

snippet enum "typedef enum"
enum ${1:name} {
	${2}
};
endsnippet

snippet try "try"
try {
	${1}
} catch (${2}) {
	${3}
}
endsnippet

snippet catch "catch"
catch (${1}) {
	${2}
}
endsnippet

snippet fori "foreach"
for (${1:char} ${2:i} : ${3})${4/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2: {:)/}
	${4}
${4/([^\r\n|^\r|^\n]|\n\n|\r\r)*(\r\n|\r|\n)?.*/(?2:}:)/}
endsnippet

# vim:ft=snippets:
